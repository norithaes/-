#include <stdio.h>
#include <string.h>

#define MAX_ITEMS 5
#define NAME_LENGTH 30
#define BUFFER_SIZE 256

char item_names[MAX_ITEMS][NAME_LENGTH]; 
int item_stocks[MAX_ITEMS];          
int item_total_in[MAX_ITEMS];        
int item_total_out[MAX_ITEMS];  


void initialize_program() {
    for (int i = 0; i < MAX_ITEMS; i++) {
        strcpy_s(item_names[i], NAME_LENGTH, "(미입력)");
        item_stocks[i] = 0;
        item_total_in[i] = 0;
        item_total_out[i] = 0;
    }
    printf("--- 쇼핑몰 재고 관리 프로그램 시작 ---\n");
    printf("5개 상품의 데이터가 초기화되었습니다.\n");
}

void clear_input_buffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

// --- 1. 입고 기능 로직 함수 ---
void handle_in(int input_choice, int item_id, int quantity) {
    if (input_choice == 1) {

        for (int i = 0; i < MAX_ITEMS; i++) {
            item_stocks[i] += quantity;
            item_total_in[i] += quantity;
        }
        printf("-> 전체 상품에 %d개씩 입고되었습니다.\n", quantity);

    }
    else if (input_choice == 2) {
        int index = item_id - 1;
        item_stocks[index] += quantity;
        item_total_in[index] += quantity;
        printf("-> 상품 ID %d [%s]에 %d개 입고되었습니다. 현재 재고: %d\n",
            item_id, item_names[index], quantity, item_stocks[index]);

    }
    else {
        printf("! 잘못된 선택입니다.\n");
    }
}

// --- 2. 판매 기능 로직 함수 ---
void handle_out(int item_id, int quantity) {
    int index = item_id - 1;

    if (item_stocks[index] >= quantity) {
        item_stocks[index] -= quantity;
        item_total_out[index] += quantity;
        printf("-> 상품 ID %d [%s]에서 %d개 판매되었습니다. 현재 재고: %d\n",
            item_id, item_names[index], quantity, item_stocks[index]);
    }
    else {
        int sold_qty = item_stocks[index];
        item_total_out[index] += sold_qty;
        item_stocks[index] = 0; 
        printf("! 재고 부족: 상품 ID %d [%s]의 현재 재고는 %d개입니다. %d개만 판매 처리합니다.\n",
            item_id, item_names[index], sold_qty, sold_qty);
    }
}

// --- 3. 상품현황 기능 함수 (로직과 출력을 함께 처리) ---
void display_status() {
    int total_stock = 0;
    int total_sales = 0;
    int max_sales = -1;
    int max_sales_id = -1;

    printf("\n--- 3. 상품현황 ---\n");

    for (int i = 0; i < MAX_ITEMS; i++) {
        total_stock += item_stocks[i];
        total_sales += item_total_out[i];

        if (item_total_out[i] > max_sales) {
            max_sales = item_total_out[i];
            max_sales_id = i + 1;
        }
    }

   
    printf("총 재고수량 : %d\n", total_stock);
    printf("총 판매량 : %d\n", total_sales);

    if (max_sales_id != -1) {
        printf("가장 많이 판매된 상품 : ID %d [%s], 판매량 %d\n",
            max_sales_id, item_names[max_sales_id - 1], max_sales);
    }

    printf("\n--- 개별 상품 재고 현황 ---\n");
    for (int i = 0; i < MAX_ITEMS; i++) {
        int item_id = i + 1;
        printf("ID %d 상품명: [%s], 현재 재고: %d, 총 판매량: %d\n",
            item_id, item_names[i], item_stocks[i], item_total_out[i]);

        if (item_stocks[i] == 0) {
            printf("  -> 재고부족(0)\n");
        }
        else if (item_stocks[i] < 5) {
            printf("  -> 재고부족(%d)\n", item_stocks[i]);
        }
    }
    printf("---------------------------\n");
}

// --- 4. 상품명 입력/수정 기능 함수 ---
void handle_item_name(int item_id, const char* new_name) {
    int index = item_id - 1;

  
    strcpy_s(item_names[index], NAME_LENGTH, new_name);
    printf("-> 상품 ID %d의 상품명이 '%s'(으)로 변경되었습니다.\n", item_id, item_names[index]);
}



int main() {
    int choice;

#define _CRT_SECURE_NO_WARNINGS

    initialize_program();

    while (1) {
        printf("\n[쇼핑몰 관리 프로그램]\n");
        printf("원하는 메뉴를 선택하세요.(1. 입고, 2. 판매, 3. 상품현황, 4. 상품명 입력, 5. 종료) : ");

     
        if (scanf_s("%d", &choice) != 1) {
            printf("! 잘못된 입력입니다. 숫자를 입력해 주세요.\n");
            clear_input_buffer();
            continue;
        }
        clear_input_buffer(); 

        switch (choice) {
        case 1: { // 입고
            int input_choice, item_id, quantity;
            printf("\n>> 1. 입고 >>\n");
            printf("입고 방식을 선택하세요.(1. 전체 상품 입고, 2. 개별 상품 입고) : ");
            if (scanf_s("%d", &input_choice) != 1 || (input_choice != 1 && input_choice != 2)) {
                printf("! 잘못된 입고 방식 선택입니다.\n"); clear_input_buffer(); break;
            }
            clear_input_buffer();

            if (input_choice == 1) {
                printf("(입력) 전체 상품에 입고할 수량: ");
                if (scanf_s("%d", &quantity) != 1 || quantity < 0) {
                    printf("! 유효하지 않은 수량입니다.\n"); clear_input_buffer(); break;
                }
                clear_input_buffer();
                handle_in(1, 0, quantity);

            }
            else if (input_choice == 2) {
                printf("(입력) 상품 ID (1~%d): ", MAX_ITEMS);
                if (scanf_s("%d", &item_id) != 1 || item_id < 1 || item_id > MAX_ITEMS) {
                    printf("! 유효하지 않은 상품 ID입니다.\n"); clear_input_buffer(); break;
                }
                clear_input_buffer();

                printf("(입력) 입고 수량: ");
                if (scanf_s("%d", &quantity) != 1 || quantity < 0) {
                    printf("! 유효하지 않은 수량입니다.\n"); clear_input_buffer(); break;
                }
                clear_input_buffer();
                handle_in(2, item_id, quantity); 
            }
            break;
        }
        case 2: { // 판매 (개별 상품 판매만 구현)
            int item_id, quantity;
            printf("\n>> 2. 판매 >>\n");
           

            printf("(입력) 판매할 상품 ID (1~%d): ", MAX_ITEMS);
            if (scanf_s("%d", &item_id) != 1 || item_id < 1 || item_id > MAX_ITEMS) {
                printf("! 유효하지 않은 상품 ID입니다.\n"); clear_input_buffer(); break;
            }
            clear_input_buffer();

            printf("(입력) 판매 수량: ");
            if (scanf_s("%d", &quantity) != 1 || quantity < 0) {
                printf("! 유효하지 않은 수량입니다.\n"); clear_input_buffer(); break;
            }
            clear_input_buffer();

            handle_out(item_id, quantity); 
            break;
        }
        case 3: // 상품현황
            display_status();
            break;
        case 4: { // 상품명 입력
            int item_id;
            char new_name[NAME_LENGTH];
            printf("\n--- 4. 상품명 입력 ---\n");

            printf("상품 ID (1~%d)를 선택하세요: ", MAX_ITEMS);
            if (scanf_s("%d", &item_id) != 1 || item_id < 1 || item_id > MAX_ITEMS) {
                printf("! 유효하지 않은 상품 ID입니다.\n"); clear_input_buffer(); break;
            }
            clear_input_buffer();

            printf("ID %d의 새로운 상품명을 입력하세요: ", item_id);
            
            if (scanf_s("%[^\n]", new_name, (unsigned int)NAME_LENGTH) != 1) {
                printf("! 입력에 오류가 발생했습니다.\n"); clear_input_buffer(); break;
            }
            clear_input_buffer();

            handle_item_name(item_id, new_name); 
            break;
        }
        case 5:
            printf("\n--- 프로그램 종료 ---\n");
            return 0;
        default:
            printf("! 잘못된 메뉴 선택입니다. 1에서 5 사이의 숫자를 입력해 주세요.\n");
            break;
        }
    }
}
